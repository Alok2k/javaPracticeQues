filter is for selecting elements based on a condition.
map is for transforming each element using a function.
collect is for accumulating the elements into a different form, often a collection.
_________________________________________________________________________________________
filter:
Purpose: Used to filter elements of a stream based on a given predicate.
Usage: stream.filter(predicate).
____________________
Example: Filtering out elements that meet a certain condition.
List<String> filteredList = myList.stream()
                                 .filter(s -> s.length() > 3)
                                 .collect(Collectors.toList());,
_________________________________________________________________________________________
map:
Purpose: Used to transform each element of a stream using a given function.
Usage: stream.map(transformationFunction).
Example: Converting each element of a list to uppercase.
____________________
List<String> upperCaseList = myList.stream()
                                  .map(String::toUpperCase)
                                  .collect(Collectors.toList());

_________________________________________________________________________________________
collect:

Purpose: Used to accumulate the elements of a stream into a different form,
usually a collection like List, Set, or Map.

Usage: stream.collect(collector).
____________________
Example: Collecting elements into a List.
List<String> collectedList = myList.stream()
                                  .collect(Collectors.toList());

________________________________________________________________________________________
To understand what flattening a stream consists in, consider a
structure like [ [1,2,3],[4,5,6],[7,8,9] ] which has "two levels".
 It's basically a big List containing three more List.
  Flattening this means transforming it in a "one level" structure
   e.g. [ 1,2,3,4,5,6,7,8,9 ] i.e. just one list.